// Simple_diffuse.psh

struct VertexShaderInput {
  vec4 position;
  vec4 normal;
  vec4 tex_coord;
  vec4 tangent;
};

struct PixelShaderInput {
  vec4 position;
  vec4 tex_coord;
  vec4 eye_dir;
  vec4 light_dir;
  vec4 shadow_position;
  vec4 half_dir;
  vec4 interpolated_position;
};

struct PixelShaderOutput {
  vec4 color;
};

uniform sampler2D AmbientOcclusionTextureSampler;
uniform sampler2D DiffuseTextureSampler;
uniform vec4 GlobalCascadeDepths[1];
uniform vec4 GlobalCascadeOffsets[4];
uniform vec4 GlobalCascadeScales[4];
uniform vec4 GlobalLightAmbient;
uniform vec4 GlobalLightBrightness;
uniform vec4 GlobalLightDiffuse;
uniform vec4 GlobalMaterialAmbient;
uniform vec4 GlobalMaterialDiffuse;
uniform vec4 GlobalShadowMapOffsets[6];
uniform sampler2D NormalTextureSampler;
uniform sampler2D ShadowTextureSampler;

vec3 GetNormal(in PixelShaderInput var_in);
vec3 GetDiffuse(in PixelShaderInput var_in, in vec3 normal);
float GetAmbientOcclusion(in PixelShaderInput var_in);
vec3 GetAmbient(in PixelShaderInput var_in);
vec3 GetAlbedo(in PixelShaderInput var_in);
vec3 GetCascadeIndex(in vec3 pos_in_light_proj_space, in float depth_in_camera_proj_space, out float out_depth);
float CalcShadowTerm(in vec2 tex_coord, in float depth);
float CalcShadowCsm(in PixelShaderInput var_in);
PixelShaderOutput Main(in PixelShaderInput var_in);

vec3 GetNormal(in PixelShaderInput var_in) {
  return normalize((2.0 * (texture2D(NormalTextureSampler, vec2(var_in.tex_coord)).xyz  - 0.5)));
}

vec3 GetDiffuse(in PixelShaderInput var_in, in vec3 normal) {
  return (vec3(GlobalLightDiffuse) * vec3(GlobalMaterialDiffuse)) * clamp(dot(normal, vec3(var_in.light_dir)), 0.0, 1.0);
}

float GetAmbientOcclusion(in PixelShaderInput var_in) {
  float ambient_occlusion;
  ambient_occlusion = texture2D(AmbientOcclusionTextureSampler, vec2(var_in.tex_coord)).x;
  return 1.0;
}

vec3 GetAmbient(in PixelShaderInput var_in) {
  return (vec3(GlobalLightAmbient) * vec3(GlobalMaterialAmbient));
}

vec3 GetAlbedo(in PixelShaderInput var_in) {
  return vec3(texture2D(DiffuseTextureSampler, vec2(var_in.tex_coord)));
}

vec3 GetCascadeIndex(in vec3 pos_in_light_proj_space, in float depth_in_camera_proj_space, out float out_depth) {
  vec4 v;
  int kCascadeIdx;
  float kShadowEpsilon = -0.01;
  vec3 tex_shadow;
  v = vec4(lessThan(GlobalCascadeDepths[0], vec4(depth_in_camera_proj_space, depth_in_camera_proj_space, depth_in_camera_proj_space, depth_in_camera_proj_space)));
  kCascadeIdx = int(dot(vec4(1.0, 1.0, 1.0, 1.0), v));
  pos_in_light_proj_space = ((pos_in_light_proj_space * GlobalCascadeScales[kCascadeIdx].xyz) + GlobalCascadeOffsets[kCascadeIdx].xyz);
  out_depth = (pos_in_light_proj_space.z  + kShadowEpsilon);
  tex_shadow = vec3(((0.5 * pos_in_light_proj_space.xy) + 0.5), float(kCascadeIdx));
  // For OpenGL, this is not needed
  // Tex_shadow.y  = (1.0 - tex_shadow.y);
  tex_shadow.x  /= 4.0;
  tex_shadow.x  += (float(kCascadeIdx) / 4.0);
  return tex_shadow;
}

float CalcShadowTerm(in vec2 uv, in float depth) {
  float shadow = 0.0;
  int idx = 0;
  vec4 depth4;
  for (; (idx < 3); (idx++)) {
    depth4.x  = texture2D(ShadowTextureSampler, (uv + GlobalShadowMapOffsets[((idx * 2) + 0)].xy)).x;
    depth4.y  = texture2D(ShadowTextureSampler, (uv + GlobalShadowMapOffsets[((idx * 2) + 0)].zw)).x;
    depth4.z  = texture2D(ShadowTextureSampler, (uv + GlobalShadowMapOffsets[((idx * 2) + 1)].xy)).x;
    depth4.w  = texture2D(ShadowTextureSampler, (uv + GlobalShadowMapOffsets[((idx * 2) + 1)].zw)).x;
    shadow += dot(vec4(greaterThan(depth4, vec4(depth))), vec4(0.0769231));
  }
  shadow += (texture2D(ShadowTextureSampler, uv).x  > depth) ? 0.0769231 : 0.0;
  return shadow;
}

float CalcShadowCsm(in PixelShaderInput var_in) {
  float depth_in_camera_proj_space;
  vec3 tex_coord_shadow;
  float depth;
  float shadow;
  depth_in_camera_proj_space = (var_in.interpolated_position.z  / var_in.interpolated_position.w);
  tex_coord_shadow = GetCascadeIndex((var_in.shadow_position.xyz  / var_in.shadow_position.w), depth_in_camera_proj_space, depth);
  shadow = CalcShadowTerm(tex_coord_shadow.xy , depth);
  //shadow = (texture2D(ShadowTextureSampler, tex_coord_shadow.xy).x  > depth) ? 1.0 : 0.0;
  return shadow;
}

PixelShaderOutput Main(in PixelShaderInput var_in) {
  vec3 normal;
  float shadow;
  vec3 ambient;
  vec3 diffuse;
  vec3 albedo;
  PixelShaderOutput xlat_var_output;
  normal = GetNormal(var_in);
  shadow = CalcShadowCsm(var_in);
  ambient = GetAmbient(var_in);
  diffuse = GetDiffuse(var_in, normal);
  albedo = GetAlbedo(var_in);
  xlat_var_output.color.xyz  = (GetAmbientOcclusion(var_in) * (ambient + ((shadow * diffuse) * GlobalLightBrightness.x))) * albedo;
  xlat_var_output.color.w  = 1.0;
  return xlat_var_output;
}

varying vec4 v_tex_coord;
varying vec4 v_eye_dir;
varying vec4 v_light_dir;
varying vec4 v_shadow_position;
varying vec4 v_half_dir;
varying vec4 v_interpolated_position;

void main() {
  PixelShaderOutput var_out;
  PixelShaderInput var_in;
  var_in.position = vec4(0.0);
  var_in.tex_coord = v_tex_coord;
  var_in.eye_dir = v_eye_dir;
  var_in.light_dir = v_light_dir;
  var_in.shadow_position = v_shadow_position;
  var_in.half_dir = v_half_dir;
  var_in.interpolated_position = v_interpolated_position;
  var_out = Main(var_in);
  gl_FragData[0] = vec4(var_out.color);
}
